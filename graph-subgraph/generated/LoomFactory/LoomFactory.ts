// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class TreeCreated extends ethereum.Event {
  get params(): TreeCreated__Params {
    return new TreeCreated__Params(this);
  }
}

export class TreeCreated__Params {
  _event: TreeCreated;

  constructor(event: TreeCreated) {
    this._event = event;
  }

  get treeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get treeAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get nftContractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get creator(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get rootContent(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class LoomFactory extends ethereum.SmartContract {
  static bind(address: Address): LoomFactory {
    return new LoomFactory("LoomFactory", address);
  }

  SALT(): Bytes {
    let result = super.call("SALT", "SALT():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SALT(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SALT", "SALT():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allTrees(param0: BigInt): Bytes {
    let result = super.call("allTrees", "allTrees(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBytes();
  }

  try_allTrees(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("allTrees", "allTrees(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  createTree(
    rootContent: string,
    rootTokenSupply: BigInt,
    modelId: string,
    creator: Address,
  ): Address {
    let result = super.call(
      "createTree",
      "createTree(string,uint256,string,address):(address)",
      [
        ethereum.Value.fromString(rootContent),
        ethereum.Value.fromUnsignedBigInt(rootTokenSupply),
        ethereum.Value.fromString(modelId),
        ethereum.Value.fromAddress(creator),
      ],
    );

    return result[0].toAddress();
  }

  try_createTree(
    rootContent: string,
    rootTokenSupply: BigInt,
    modelId: string,
    creator: Address,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createTree",
      "createTree(string,uint256,string,address):(address)",
      [
        ethereum.Value.fromString(rootContent),
        ethereum.Value.fromUnsignedBigInt(rootTokenSupply),
        ethereum.Value.fromString(modelId),
        ethereum.Value.fromAddress(creator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllTrees(): Array<Bytes> {
    let result = super.call("getAllTrees", "getAllTrees():(bytes32[])", []);

    return result[0].toBytesArray();
  }

  try_getAllTrees(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("getAllTrees", "getAllTrees():(bytes32[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getNFTFactory(): Address {
    let result = super.call("getNFTFactory", "getNFTFactory():(address)", []);

    return result[0].toAddress();
  }

  try_getNFTFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNFTFactory",
      "getNFTFactory():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSalt(): Bytes {
    let result = super.call("getSalt", "getSalt():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getSalt(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getSalt", "getSalt():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTree(treeId: Bytes): Address {
    let result = super.call("getTree", "getTree(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(treeId),
    ]);

    return result[0].toAddress();
  }

  try_getTree(treeId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("getTree", "getTree(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(treeId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTreeCount(): BigInt {
    let result = super.call("getTreeCount", "getTreeCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTreeCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTreeCount", "getTreeCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTreeNFTContract(treeId: Bytes): Address {
    let result = super.call(
      "getTreeNFTContract",
      "getTreeNFTContract(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(treeId)],
    );

    return result[0].toAddress();
  }

  try_getTreeNFTContract(treeId: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTreeNFTContract",
      "getTreeNFTContract(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(treeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUserTrees(user: Address): Array<Bytes> {
    let result = super.call(
      "getUserTrees",
      "getUserTrees(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );

    return result[0].toBytesArray();
  }

  try_getUserTrees(user: Address): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getUserTrees",
      "getUserTrees(address):(bytes32[])",
      [ethereum.Value.fromAddress(user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  nftFactory(): Address {
    let result = super.call("nftFactory", "nftFactory():(address)", []);

    return result[0].toAddress();
  }

  try_nftFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftFactory", "nftFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  treeNFTContracts(param0: Bytes): Address {
    let result = super.call(
      "treeNFTContracts",
      "treeNFTContracts(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toAddress();
  }

  try_treeNFTContracts(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "treeNFTContracts",
      "treeNFTContracts(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trees(param0: Bytes): Address {
    let result = super.call("trees", "trees(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);

    return result[0].toAddress();
  }

  try_trees(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall("trees", "trees(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userTrees(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "userTrees",
      "userTrees(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBytes();
  }

  try_userTrees(param0: Address, param1: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "userTrees",
      "userTrees(address,uint256):(bytes32)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateTreeCall extends ethereum.Call {
  get inputs(): CreateTreeCall__Inputs {
    return new CreateTreeCall__Inputs(this);
  }

  get outputs(): CreateTreeCall__Outputs {
    return new CreateTreeCall__Outputs(this);
  }
}

export class CreateTreeCall__Inputs {
  _call: CreateTreeCall;

  constructor(call: CreateTreeCall) {
    this._call = call;
  }

  get rootContent(): string {
    return this._call.inputValues[0].value.toString();
  }

  get rootTokenSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get modelId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get creator(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class CreateTreeCall__Outputs {
  _call: CreateTreeCall;

  constructor(call: CreateTreeCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
