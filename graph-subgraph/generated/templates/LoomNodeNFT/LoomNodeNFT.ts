// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class NodeNFTMinted extends ethereum.Event {
  get params(): NodeNFTMinted__Params {
    return new NodeNFTMinted__Params(this);
  }
}

export class NodeNFTMinted__Params {
  _event: NodeNFTMinted;

  constructor(event: NodeNFTMinted) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get content(): string {
    return this._event.parameters[3].value.toString();
  }

  get tokenBoundAccount(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get nodeTokenContract(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class NodeTokenCreated extends ethereum.Event {
  get params(): NodeTokenCreated__Params {
    return new NodeTokenCreated__Params(this);
  }
}

export class NodeTokenCreated__Params {
  _event: NodeTokenCreated;

  constructor(event: NodeTokenCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get nodeTokenContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenBoundAccount(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenBoundAccountCreated extends ethereum.Event {
  get params(): TokenBoundAccountCreated__Params {
    return new TokenBoundAccountCreated__Params(this);
  }
}

export class TokenBoundAccountCreated__Params {
  _event: TokenBoundAccountCreated;

  constructor(event: TokenBoundAccountCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get tokenBoundAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LoomNodeNFT__getNodeTokenInfoResult {
  value0: Address;
  value1: Address;
  value2: BigInt;
  value3: string;
  value4: string;
  value5: BigInt;

  constructor(
    value0: Address,
    value1: Address,
    value2: BigInt,
    value3: string,
    value4: string,
    value5: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromString(this.value3));
    map.set("value4", ethereum.Value.fromString(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }

  getTokenContract(): Address {
    return this.value0;
  }

  getTokenBoundAccount(): Address {
    return this.value1;
  }

  getTokenBalance(): BigInt {
    return this.value2;
  }

  getTokenName(): string {
    return this.value3;
  }

  getTokenSymbol(): string {
    return this.value4;
  }

  getTokenSupply(): BigInt {
    return this.value5;
  }
}

export class LoomNodeNFT extends ethereum.SmartContract {
  static bind(address: Address): LoomNodeNFT {
    return new LoomNodeNFT("LoomNodeNFT", address);
  }

  accountImplementation(): Address {
    let result = super.call(
      "accountImplementation",
      "accountImplementation():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_accountImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountImplementation",
      "accountImplementation():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  authorizedMinters(param0: Address): boolean {
    let result = super.call(
      "authorizedMinters",
      "authorizedMinters(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_authorizedMinters(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "authorizedMinters",
      "authorizedMinters(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeTokenBoundAccount(tokenId: BigInt): Address {
    let result = super.call(
      "computeTokenBoundAccount",
      "computeTokenBoundAccount(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toAddress();
  }

  try_computeTokenBoundAccount(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "computeTokenBoundAccount",
      "computeTokenBoundAccount(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNodeContent(nodeId: Bytes): string {
    let result = super.call(
      "getNodeContent",
      "getNodeContent(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toString();
  }

  try_getNodeContent(nodeId: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getNodeContent",
      "getNodeContent(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNodeIdFromTokenId(tokenId: BigInt): Bytes {
    let result = super.call(
      "getNodeIdFromTokenId",
      "getNodeIdFromTokenId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toBytes();
  }

  try_getNodeIdFromTokenId(tokenId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getNodeIdFromTokenId",
      "getNodeIdFromTokenId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNodeTokenBalance(nodeId: Bytes): BigInt {
    let result = super.call(
      "getNodeTokenBalance",
      "getNodeTokenBalance(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toBigInt();
  }

  try_getNodeTokenBalance(nodeId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getNodeTokenBalance",
      "getNodeTokenBalance(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNodeTokenContract(tokenId: BigInt): Address {
    let result = super.call(
      "getNodeTokenContract",
      "getNodeTokenContract(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toAddress();
  }

  try_getNodeTokenContract(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNodeTokenContract",
      "getNodeTokenContract(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNodeTokenContractByNodeId(nodeId: Bytes): Address {
    let result = super.call(
      "getNodeTokenContractByNodeId",
      "getNodeTokenContractByNodeId(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toAddress();
  }

  try_getNodeTokenContractByNodeId(
    nodeId: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNodeTokenContractByNodeId",
      "getNodeTokenContractByNodeId(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNodeTokenInfo(tokenId: BigInt): LoomNodeNFT__getNodeTokenInfoResult {
    let result = super.call(
      "getNodeTokenInfo",
      "getNodeTokenInfo(uint256):(address,address,uint256,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return new LoomNodeNFT__getNodeTokenInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toString(),
      result[4].toString(),
      result[5].toBigInt(),
    );
  }

  try_getNodeTokenInfo(
    tokenId: BigInt,
  ): ethereum.CallResult<LoomNodeNFT__getNodeTokenInfoResult> {
    let result = super.tryCall(
      "getNodeTokenInfo",
      "getNodeTokenInfo(uint256):(address,address,uint256,string,string,uint256)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoomNodeNFT__getNodeTokenInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toString(),
        value[4].toString(),
        value[5].toBigInt(),
      ),
    );
  }

  getTextContent(nodeId: Bytes): string {
    let result = super.call(
      "getTextContent",
      "getTextContent(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toString();
  }

  try_getTextContent(nodeId: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getTextContent",
      "getTextContent(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getTokenBoundAccount(tokenId: BigInt): Address {
    let result = super.call(
      "getTokenBoundAccount",
      "getTokenBoundAccount(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );

    return result[0].toAddress();
  }

  try_getTokenBoundAccount(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenBoundAccount",
      "getTokenBoundAccount(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenBoundAccountByNodeId(nodeId: Bytes): Address {
    let result = super.call(
      "getTokenBoundAccountByNodeId",
      "getTokenBoundAccountByNodeId(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toAddress();
  }

  try_getTokenBoundAccountByNodeId(
    nodeId: Bytes,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTokenBoundAccountByNodeId",
      "getTokenBoundAccountByNodeId(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTokenIdFromNodeId(nodeId: Bytes): BigInt {
    let result = super.call(
      "getTokenIdFromNodeId",
      "getTokenIdFromNodeId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toBigInt();
  }

  try_getTokenIdFromNodeId(nodeId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenIdFromNodeId",
      "getTokenIdFromNodeId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintNodeNFT(
    to: Address,
    nodeId: Bytes,
    content: string,
    tokenName: string,
    tokenSymbol: string,
    tokenSupply: BigInt,
  ): BigInt {
    let result = super.call(
      "mintNodeNFT",
      "mintNodeNFT(address,bytes32,string,string,string,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytes(nodeId),
        ethereum.Value.fromString(content),
        ethereum.Value.fromString(tokenName),
        ethereum.Value.fromString(tokenSymbol),
        ethereum.Value.fromUnsignedBigInt(tokenSupply),
      ],
    );

    return result[0].toBigInt();
  }

  try_mintNodeNFT(
    to: Address,
    nodeId: Bytes,
    content: string,
    tokenName: string,
    tokenSymbol: string,
    tokenSupply: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintNodeNFT",
      "mintNodeNFT(address,bytes32,string,string,string,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromFixedBytes(nodeId),
        ethereum.Value.fromString(content),
        ethereum.Value.fromString(tokenName),
        ethereum.Value.fromString(tokenSymbol),
        ethereum.Value.fromUnsignedBigInt(tokenSupply),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nodeIdToTokenId(param0: Bytes): BigInt {
    let result = super.call(
      "nodeIdToTokenId",
      "nodeIdToTokenId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return result[0].toBigInt();
  }

  try_nodeIdToTokenId(param0: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nodeIdToTokenId",
      "nodeIdToTokenId(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeTokenContracts(param0: BigInt): Address {
    let result = super.call(
      "nodeTokenContracts",
      "nodeTokenContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_nodeTokenContracts(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "nodeTokenContracts",
      "nodeTokenContracts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nodeTokenNames(param0: BigInt): string {
    let result = super.call(
      "nodeTokenNames",
      "nodeTokenNames(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toString();
  }

  try_nodeTokenNames(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "nodeTokenNames",
      "nodeTokenNames(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nodeTokenSupplies(param0: BigInt): BigInt {
    let result = super.call(
      "nodeTokenSupplies",
      "nodeTokenSupplies(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBigInt();
  }

  try_nodeTokenSupplies(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nodeTokenSupplies",
      "nodeTokenSupplies(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nodeTokenSymbols(param0: BigInt): string {
    let result = super.call(
      "nodeTokenSymbols",
      "nodeTokenSymbols(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toString();
  }

  try_nodeTokenSymbols(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "nodeTokenSymbols",
      "nodeTokenSymbols(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  salt(): Bytes {
    let result = super.call("salt", "salt():(bytes32)", []);

    return result[0].toBytes();
  }

  try_salt(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("salt", "salt():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  textContent(param0: BigInt): string {
    let result = super.call("textContent", "textContent(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_textContent(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("textContent", "textContent(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenBoundAccounts(param0: BigInt): Address {
    let result = super.call(
      "tokenBoundAccounts",
      "tokenBoundAccounts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toAddress();
  }

  try_tokenBoundAccounts(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenBoundAccounts",
      "tokenBoundAccounts(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenIdToNodeId(param0: BigInt): Bytes {
    let result = super.call(
      "tokenIdToNodeId",
      "tokenIdToNodeId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return result[0].toBytes();
  }

  try_tokenIdToNodeId(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "tokenIdToNodeId",
      "tokenIdToNodeId(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURIs(param0: BigInt): string {
    let result = super.call("tokenURIs", "tokenURIs(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toString();
  }

  try_tokenURIs(param0: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURIs", "tokenURIs(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _registry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accountImplementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _salt(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddAuthorizedMinterCall extends ethereum.Call {
  get inputs(): AddAuthorizedMinterCall__Inputs {
    return new AddAuthorizedMinterCall__Inputs(this);
  }

  get outputs(): AddAuthorizedMinterCall__Outputs {
    return new AddAuthorizedMinterCall__Outputs(this);
  }
}

export class AddAuthorizedMinterCall__Inputs {
  _call: AddAuthorizedMinterCall;

  constructor(call: AddAuthorizedMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddAuthorizedMinterCall__Outputs {
  _call: AddAuthorizedMinterCall;

  constructor(call: AddAuthorizedMinterCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnTokensFromNodeCall extends ethereum.Call {
  get inputs(): BurnTokensFromNodeCall__Inputs {
    return new BurnTokensFromNodeCall__Inputs(this);
  }

  get outputs(): BurnTokensFromNodeCall__Outputs {
    return new BurnTokensFromNodeCall__Outputs(this);
  }
}

export class BurnTokensFromNodeCall__Inputs {
  _call: BurnTokensFromNodeCall;

  constructor(call: BurnTokensFromNodeCall) {
    this._call = call;
  }

  get nodeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class BurnTokensFromNodeCall__Outputs {
  _call: BurnTokensFromNodeCall;

  constructor(call: BurnTokensFromNodeCall) {
    this._call = call;
  }
}

export class MintNodeNFTCall extends ethereum.Call {
  get inputs(): MintNodeNFTCall__Inputs {
    return new MintNodeNFTCall__Inputs(this);
  }

  get outputs(): MintNodeNFTCall__Outputs {
    return new MintNodeNFTCall__Outputs(this);
  }
}

export class MintNodeNFTCall__Inputs {
  _call: MintNodeNFTCall;

  constructor(call: MintNodeNFTCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nodeId(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get content(): string {
    return this._call.inputValues[2].value.toString();
  }

  get tokenName(): string {
    return this._call.inputValues[3].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[4].value.toString();
  }

  get tokenSupply(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class MintNodeNFTCall__Outputs {
  _call: MintNodeNFTCall;

  constructor(call: MintNodeNFTCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintTokensToNodeCall extends ethereum.Call {
  get inputs(): MintTokensToNodeCall__Inputs {
    return new MintTokensToNodeCall__Inputs(this);
  }

  get outputs(): MintTokensToNodeCall__Outputs {
    return new MintTokensToNodeCall__Outputs(this);
  }
}

export class MintTokensToNodeCall__Inputs {
  _call: MintTokensToNodeCall;

  constructor(call: MintTokensToNodeCall) {
    this._call = call;
  }

  get nodeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class MintTokensToNodeCall__Outputs {
  _call: MintTokensToNodeCall;

  constructor(call: MintTokensToNodeCall) {
    this._call = call;
  }
}

export class RemoveAuthorizedMinterCall extends ethereum.Call {
  get inputs(): RemoveAuthorizedMinterCall__Inputs {
    return new RemoveAuthorizedMinterCall__Inputs(this);
  }

  get outputs(): RemoveAuthorizedMinterCall__Outputs {
    return new RemoveAuthorizedMinterCall__Outputs(this);
  }
}

export class RemoveAuthorizedMinterCall__Inputs {
  _call: RemoveAuthorizedMinterCall;

  constructor(call: RemoveAuthorizedMinterCall) {
    this._call = call;
  }

  get minter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAuthorizedMinterCall__Outputs {
  _call: RemoveAuthorizedMinterCall;

  constructor(call: RemoveAuthorizedMinterCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateTokenContentCall extends ethereum.Call {
  get inputs(): UpdateTokenContentCall__Inputs {
    return new UpdateTokenContentCall__Inputs(this);
  }

  get outputs(): UpdateTokenContentCall__Outputs {
    return new UpdateTokenContentCall__Outputs(this);
  }
}

export class UpdateTokenContentCall__Inputs {
  _call: UpdateTokenContentCall;

  constructor(call: UpdateTokenContentCall) {
    this._call = call;
  }

  get nodeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newContent(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateTokenContentCall__Outputs {
  _call: UpdateTokenContentCall;

  constructor(call: UpdateTokenContentCall) {
    this._call = call;
  }
}
