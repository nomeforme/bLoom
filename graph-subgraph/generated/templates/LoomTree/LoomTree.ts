// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class MetadataSet extends ethereum.Event {
  get params(): MetadataSet__Params {
    return new MetadataSet__Params(this);
  }
}

export class MetadataSet__Params {
  _event: MetadataSet;

  constructor(event: MetadataSet) {
    this._event = event;
  }

  get nodeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get key(): string {
    return this._event.parameters[1].value.toString();
  }

  get value(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class NodeCreated extends ethereum.Event {
  get params(): NodeCreated__Params {
    return new NodeCreated__Params(this);
  }
}

export class NodeCreated__Params {
  _event: NodeCreated;

  constructor(event: NodeCreated) {
    this._event = event;
  }

  get nodeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get parentId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get author(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NodeUpdated extends ethereum.Event {
  get params(): NodeUpdated__Params {
    return new NodeUpdated__Params(this);
  }
}

export class NodeUpdated__Params {
  _event: NodeUpdated;

  constructor(event: NodeUpdated) {
    this._event = event;
  }

  get nodeId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get author(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LoomTree__getNodeResult {
  value0: Bytes;
  value1: Bytes;
  value2: Array<Bytes>;
  value3: Address;
  value4: BigInt;
  value5: boolean;
  value6: string;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: Array<Bytes>,
    value3: Address,
    value4: BigInt,
    value5: boolean,
    value6: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromFixedBytesArray(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }

  getId(): Bytes {
    return this.value0;
  }

  getParentId(): Bytes {
    return this.value1;
  }

  getChildren(): Array<Bytes> {
    return this.value2;
  }

  getAuthor(): Address {
    return this.value3;
  }

  getTimestamp(): BigInt {
    return this.value4;
  }

  getIsRoot(): boolean {
    return this.value5;
  }

  getModelId(): string {
    return this.value6;
  }
}

export class LoomTree__nodesResult {
  value0: Bytes;
  value1: Bytes;
  value2: Address;
  value3: BigInt;
  value4: boolean;
  value5: string;
  value6: boolean;
  value7: string;

  constructor(
    value0: Bytes,
    value1: Bytes,
    value2: Address,
    value3: BigInt,
    value4: boolean,
    value5: string,
    value6: boolean,
    value7: string,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromFixedBytes(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromString(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromString(this.value7));
    return map;
  }

  getId(): Bytes {
    return this.value0;
  }

  getParentId(): Bytes {
    return this.value1;
  }

  getAuthor(): Address {
    return this.value2;
  }

  getTimestamp(): BigInt {
    return this.value3;
  }

  getIsRoot(): boolean {
    return this.value4;
  }

  getContent(): string {
    return this.value5;
  }

  getHasNFT(): boolean {
    return this.value6;
  }

  getModelId(): string {
    return this.value7;
  }
}

export class LoomTree extends ethereum.SmartContract {
  static bind(address: Address): LoomTree {
    return new LoomTree("LoomTree", address);
  }

  addNode(
    parentId: Bytes,
    content: string,
    createNFT: boolean,
    modelId: string,
    author: Address,
  ): Bytes {
    let result = super.call(
      "addNode",
      "addNode(bytes32,string,bool,string,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentId),
        ethereum.Value.fromString(content),
        ethereum.Value.fromBoolean(createNFT),
        ethereum.Value.fromString(modelId),
        ethereum.Value.fromAddress(author),
      ],
    );

    return result[0].toBytes();
  }

  try_addNode(
    parentId: Bytes,
    content: string,
    createNFT: boolean,
    modelId: string,
    author: Address,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addNode",
      "addNode(bytes32,string,bool,string,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentId),
        ethereum.Value.fromString(content),
        ethereum.Value.fromBoolean(createNFT),
        ethereum.Value.fromString(modelId),
        ethereum.Value.fromAddress(author),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  addNodeWithToken(
    parentId: Bytes,
    content: string,
    tokenName: string,
    tokenSymbol: string,
    modelId: string,
    author: Address,
  ): Bytes {
    let result = super.call(
      "addNodeWithToken",
      "addNodeWithToken(bytes32,string,string,string,string,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentId),
        ethereum.Value.fromString(content),
        ethereum.Value.fromString(tokenName),
        ethereum.Value.fromString(tokenSymbol),
        ethereum.Value.fromString(modelId),
        ethereum.Value.fromAddress(author),
      ],
    );

    return result[0].toBytes();
  }

  try_addNodeWithToken(
    parentId: Bytes,
    content: string,
    tokenName: string,
    tokenSymbol: string,
    modelId: string,
    author: Address,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "addNodeWithToken",
      "addNodeWithToken(bytes32,string,string,string,string,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(parentId),
        ethereum.Value.fromString(content),
        ethereum.Value.fromString(tokenName),
        ethereum.Value.fromString(tokenSymbol),
        ethereum.Value.fromString(modelId),
        ethereum.Value.fromAddress(author),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allNodes(param0: BigInt): Bytes {
    let result = super.call("allNodes", "allNodes(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBytes();
  }

  try_allNodes(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall("allNodes", "allNodes(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllNodes(): Array<Bytes> {
    let result = super.call("getAllNodes", "getAllNodes():(bytes32[])", []);

    return result[0].toBytesArray();
  }

  try_getAllNodes(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("getAllNodes", "getAllNodes():(bytes32[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getChildren(nodeId: Bytes): Array<Bytes> {
    let result = super.call("getChildren", "getChildren(bytes32):(bytes32[])", [
      ethereum.Value.fromFixedBytes(nodeId),
    ]);

    return result[0].toBytesArray();
  }

  try_getChildren(nodeId: Bytes): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getChildren",
      "getChildren(bytes32):(bytes32[])",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getNFTContract(): Address {
    let result = super.call("getNFTContract", "getNFTContract():(address)", []);

    return result[0].toAddress();
  }

  try_getNFTContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNFTContract",
      "getNFTContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNode(nodeId: Bytes): LoomTree__getNodeResult {
    let result = super.call(
      "getNode",
      "getNode(bytes32):(bytes32,bytes32,bytes32[],address,uint256,bool,string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return new LoomTree__getNodeResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBytesArray(),
      result[3].toAddress(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toString(),
    );
  }

  try_getNode(nodeId: Bytes): ethereum.CallResult<LoomTree__getNodeResult> {
    let result = super.tryCall(
      "getNode",
      "getNode(bytes32):(bytes32,bytes32,bytes32[],address,uint256,bool,string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoomTree__getNodeResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBytesArray(),
        value[3].toAddress(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toString(),
      ),
    );
  }

  getNodeContent(nodeId: Bytes): string {
    let result = super.call(
      "getNodeContent",
      "getNodeContent(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toString();
  }

  try_getNodeContent(nodeId: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getNodeContent",
      "getNodeContent(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNodeCount(): BigInt {
    let result = super.call("getNodeCount", "getNodeCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getNodeCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getNodeCount", "getNodeCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getNodeMetadata(nodeId: Bytes, key: string): string {
    let result = super.call(
      "getNodeMetadata",
      "getNodeMetadata(bytes32,string):(string)",
      [ethereum.Value.fromFixedBytes(nodeId), ethereum.Value.fromString(key)],
    );

    return result[0].toString();
  }

  try_getNodeMetadata(nodeId: Bytes, key: string): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getNodeMetadata",
      "getNodeMetadata(bytes32,string):(string)",
      [ethereum.Value.fromFixedBytes(nodeId), ethereum.Value.fromString(key)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getNodeMetadataKeys(nodeId: Bytes): Array<string> {
    let result = super.call(
      "getNodeMetadataKeys",
      "getNodeMetadataKeys(bytes32):(string[])",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toStringArray();
  }

  try_getNodeMetadataKeys(nodeId: Bytes): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getNodeMetadataKeys",
      "getNodeMetadataKeys(bytes32):(string[])",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getNodeModelId(nodeId: Bytes): string {
    let result = super.call(
      "getNodeModelId",
      "getNodeModelId(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );

    return result[0].toString();
  }

  try_getNodeModelId(nodeId: Bytes): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getNodeModelId",
      "getNodeModelId(bytes32):(string)",
      [ethereum.Value.fromFixedBytes(nodeId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getRootId(): Bytes {
    let result = super.call("getRootId", "getRootId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getRootId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getRootId", "getRootId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  nodeHasNFT(nodeId: Bytes): boolean {
    let result = super.call("nodeHasNFT", "nodeHasNFT(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(nodeId),
    ]);

    return result[0].toBoolean();
  }

  try_nodeHasNFT(nodeId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("nodeHasNFT", "nodeHasNFT(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(nodeId),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nodes(param0: Bytes): LoomTree__nodesResult {
    let result = super.call(
      "nodes",
      "nodes(bytes32):(bytes32,bytes32,address,uint256,bool,string,bool,string)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new LoomTree__nodesResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toString(),
      result[6].toBoolean(),
      result[7].toString(),
    );
  }

  try_nodes(param0: Bytes): ethereum.CallResult<LoomTree__nodesResult> {
    let result = super.tryCall(
      "nodes",
      "nodes(bytes32):(bytes32,bytes32,address,uint256,bool,string,bool,string)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LoomTree__nodesResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toString(),
        value[6].toBoolean(),
        value[7].toString(),
      ),
    );
  }

  rootId(): Bytes {
    let result = super.call("rootId", "rootId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_rootId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("rootId", "rootId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  treeOwner(): Address {
    let result = super.call("treeOwner", "treeOwner():(address)", []);

    return result[0].toAddress();
  }

  try_treeOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("treeOwner", "treeOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get value0(): string {
    return this._call.inputValues[0].value.toString();
  }

  get owner(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get nftContractAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddNodeCall extends ethereum.Call {
  get inputs(): AddNodeCall__Inputs {
    return new AddNodeCall__Inputs(this);
  }

  get outputs(): AddNodeCall__Outputs {
    return new AddNodeCall__Outputs(this);
  }
}

export class AddNodeCall__Inputs {
  _call: AddNodeCall;

  constructor(call: AddNodeCall) {
    this._call = call;
  }

  get parentId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get content(): string {
    return this._call.inputValues[1].value.toString();
  }

  get createNFT(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get modelId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get author(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class AddNodeCall__Outputs {
  _call: AddNodeCall;

  constructor(call: AddNodeCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class AddNodeWithTokenCall extends ethereum.Call {
  get inputs(): AddNodeWithTokenCall__Inputs {
    return new AddNodeWithTokenCall__Inputs(this);
  }

  get outputs(): AddNodeWithTokenCall__Outputs {
    return new AddNodeWithTokenCall__Outputs(this);
  }
}

export class AddNodeWithTokenCall__Inputs {
  _call: AddNodeWithTokenCall;

  constructor(call: AddNodeWithTokenCall) {
    this._call = call;
  }

  get parentId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get content(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[3].value.toString();
  }

  get modelId(): string {
    return this._call.inputValues[4].value.toString();
  }

  get author(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class AddNodeWithTokenCall__Outputs {
  _call: AddNodeWithTokenCall;

  constructor(call: AddNodeWithTokenCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class InitializeRootNodeWithTokenCall extends ethereum.Call {
  get inputs(): InitializeRootNodeWithTokenCall__Inputs {
    return new InitializeRootNodeWithTokenCall__Inputs(this);
  }

  get outputs(): InitializeRootNodeWithTokenCall__Outputs {
    return new InitializeRootNodeWithTokenCall__Outputs(this);
  }
}

export class InitializeRootNodeWithTokenCall__Inputs {
  _call: InitializeRootNodeWithTokenCall;

  constructor(call: InitializeRootNodeWithTokenCall) {
    this._call = call;
  }

  get rootContent(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenSupply(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get modelId(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class InitializeRootNodeWithTokenCall__Outputs {
  _call: InitializeRootNodeWithTokenCall;

  constructor(call: InitializeRootNodeWithTokenCall) {
    this._call = call;
  }
}

export class SetNodeMetadataCall extends ethereum.Call {
  get inputs(): SetNodeMetadataCall__Inputs {
    return new SetNodeMetadataCall__Inputs(this);
  }

  get outputs(): SetNodeMetadataCall__Outputs {
    return new SetNodeMetadataCall__Outputs(this);
  }
}

export class SetNodeMetadataCall__Inputs {
  _call: SetNodeMetadataCall;

  constructor(call: SetNodeMetadataCall) {
    this._call = call;
  }

  get nodeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get key(): string {
    return this._call.inputValues[1].value.toString();
  }

  get value(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class SetNodeMetadataCall__Outputs {
  _call: SetNodeMetadataCall;

  constructor(call: SetNodeMetadataCall) {
    this._call = call;
  }
}

export class UpdateNodeContentCall extends ethereum.Call {
  get inputs(): UpdateNodeContentCall__Inputs {
    return new UpdateNodeContentCall__Inputs(this);
  }

  get outputs(): UpdateNodeContentCall__Outputs {
    return new UpdateNodeContentCall__Outputs(this);
  }
}

export class UpdateNodeContentCall__Inputs {
  _call: UpdateNodeContentCall;

  constructor(call: UpdateNodeContentCall) {
    this._call = call;
  }

  get nodeId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newContent(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateNodeContentCall__Outputs {
  _call: UpdateNodeContentCall;

  constructor(call: UpdateNodeContentCall) {
    this._call = call;
  }
}
